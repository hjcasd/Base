package com.hjc.library_widget.textimport android.annotation.SuppressLintimport android.content.Contextimport android.graphics.Rectimport android.graphics.drawable.Drawableimport android.text.Editableimport android.text.TextWatcherimport android.util.AttributeSetimport android.view.KeyEventimport android.view.MotionEventimport android.view.Viewimport android.view.inputmethod.InputMethodManagerimport androidx.appcompat.widget.AppCompatEditTextimport androidx.core.content.res.ResourcesCompatimport com.hjc.library_widget.R/** * @Author: HJC * @Date: 2019/1/7 11:31 * @Description: 搜索EditText */@SuppressLint("ClickableViewAccessibility")class SearchEditText constructor(    context: Context,    attrs: AttributeSet?) : AppCompatEditText(context, attrs), TextWatcher, View.OnFocusChangeListener,    View.OnKeyListener {    // EditText EndDrawable    private var mClearDrawable: Drawable? = null    // EditText StartDrawable    private var mSearchDrawable: Drawable? = null    private var hasFocus = false //保存控件是否获取到焦点    private var mListener: OnSearchClickListener? = null    init {        // 左侧搜索按钮        mSearchDrawable = if (compoundDrawablesRelative[0] != null) {            compoundDrawablesRelative[0]        } else {            ResourcesCompat.getDrawable(resources, R.mipmap.base_icon_search_gray, null)        }        // 右侧清除图标        mClearDrawable = if (compoundDrawablesRelative[2] != null) {            compoundDrawablesRelative[2]        } else {            ResourcesCompat.getDrawable(resources, R.mipmap.base_icon_clear, null)        }        setClearIconVisible(false)        onFocusChangeListener = this        setOnKeyListener(this)        addTextChangedListener(this)    }    override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {    }    override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {        if (hasFocus) {            setClearIconVisible(s.isNotEmpty())        }        if (s.isEmpty()) {            mListener?.onSearchClear()        } else {            mListener?.onSearchChanged(s.toString())        }    }    override fun afterTextChanged(s: Editable) {    }    override fun onFocusChange(v: View, hasFocus: Boolean) {        this.hasFocus = hasFocus        if (hasFocus) {            if (text == null) {                setClearIconVisible(false)            }            text?.let {                setClearIconVisible(it.isNotEmpty())            }        } else {            setClearIconVisible(false)        }    }    /**     * 设置是否显示清除图标     *     * @param visible 是否显示     */    private fun setClearIconVisible(visible: Boolean) {        val rightDrawable = if (visible) mClearDrawable else null        setCompoundDrawablesRelativeWithIntrinsicBounds(mSearchDrawable, null, rightDrawable, null)    }    override fun onTouchEvent(event: MotionEvent): Boolean {        val compoundDrawables = compoundDrawables        if (compoundDrawables[2] != null && event.action == MotionEvent.ACTION_UP) {            val eventX = event.rawX.toInt()            val eventY = event.rawY.toInt()            val rect = Rect()            getGlobalVisibleRect(rect)            rect.left = rect.right - 100            if (rect.contains(eventX, eventY)) {                setText("")                mListener?.onSearchClear()            }        }        return super.onTouchEvent(event)    }    override fun onKey(v: View, keyCode: Int, event: KeyEvent): Boolean {        if (keyCode == KeyEvent.KEYCODE_ENTER) {            // 隐藏软键盘            val imm = v.context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager            if (imm.isActive) {                imm.hideSoftInputFromWindow(v.applicationWindowToken, 0)            }            if (event.action == KeyEvent.ACTION_UP) {                mListener?.onSearchClick(v)            }        }        return false    }    interface OnSearchClickListener {        fun onSearchChanged(text: String)        fun onSearchClick(view: View?)        fun onSearchClear()    }    fun setOnSearchClickListener(listener: OnSearchClickListener?) {        this.mListener = listener    }}