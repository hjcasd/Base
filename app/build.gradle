plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

def config = rootProject.ext.android
def app = rootProject.ext.app
def lib = rootProject.ext.dependencies

//获取当前日期
def static releaseTime() {
    return new Date().format("yyyy-MM-dd")
}

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        applicationId "com.hjc.base"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            // 设置支持的SO库架构(必须设置如下几种,否则X5会初始化失败)
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField ('String', 'BASE_URL', app.DEV_BASE_URL)
            buildConfigField ('boolean', 'IS_DEBUG', "true")
        }

        release {
            //是否混淆
            minifyEnabled true
            //是否移除无用资源
            shrinkResources true
            //压缩优化
            zipAlignEnabled true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField ('String', 'BASE_URL', app.PROD_BASE_URL)
            buildConfigField ('boolean', 'IS_DEBUG', "false")
        }

        //指定打包路径和apk名称
        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def fileName = "BaseKt_V${variant.versionName}"
                fileName = fileName + "_${releaseTime()}"
                if ('debug' == variant.buildType.name) {
                    fileName = fileName + "_debug.apk"
                } else {
                    fileName = fileName + "_release.apk"
                }
                outputFileName = fileName
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding = true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    testImplementation lib["junit"]
    androidTestImplementation lib["testJunit"]
    androidTestImplementation lib["espresso-core"]

    implementation lib["constraintlayout"]
    implementation lib["appcompat"]
    implementation lib["recyclerview"]
    implementation lib["material"]

    implementation lib["lifecycle-viewmodel-ktx"]
    implementation lib["core-ktx"]
    implementation lib["kotlin-stdlib"]
    implementation lib["kotlinx-coroutines-android"]

    implementation lib["multidex"]

    implementation lib["glide"]
    annotationProcessor lib["glide-compiler"]
    implementation lib["glide-transformations"]

    implementation lib["rxjava"]
    implementation lib["rxandroid"]

    kapt lib["arouter-compiler"]

    implementation lib["permission"]

    implementation lib["crashreport"]
    implementation lib["nativecrashreport"]

    implementation lib["BaseRecyclerViewAdapterHelper"]

    implementation lib["SmartRefreshLayout"]
    implementation lib["SmartRefreshHeader"]

    implementation project(path: ':WebViewLib')
    implementation project(path: ':BaseLib')
}