plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

def config = rootProject.ext.android

//获取当前日期
def static releaseTime() {
    return new Date().format("yyyy-MM-dd")
}

//获取签名信息(存放到local.properties文件中)
def keystoreFile = rootProject.file("signing.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystoreFile))

android {
    compileSdkVersion config.compileSdkVersion

    defaultConfig {
        applicationId "com.hjc.base"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        ndk {
            // 设置支持的SO库架构(必须设置如下几种,否则X5会初始化失败)
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    //签名信息
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }

        debug {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (keystoreFile.exists()){
                signingConfig signingConfigs.debug
            }
        }

        release {
            //是否混淆
            minifyEnabled false
            //是否移除无用资源
            zipAlignEnabled false
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明,后者为自定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (keystoreFile.exists()){
                signingConfig signingConfigs.release
            }
        }

        //指定打包路径和apk名称
        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def fileName = "Base_V${variant.versionName}"
                fileName = fileName + "_${releaseTime()}"
                if ('debug' == variant.buildType.name) {
                    fileName = fileName + "_debug.apk"
                } else {
                    fileName = fileName + "_release.apk"
                }
                outputFileName = fileName
            }
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    lintOptions {
        disable 'GoogleAppIndexingWarning'
        checkReleaseBuilds false
        abortOnError false
    }

    buildFeatures {
        dataBinding = true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // 路由
    kapt 'com.alibaba:arouter-compiler:1.5.1'

    implementation project(':library-common')

    // 是否独立运行
    if (!isRunModule.toBoolean()) {
        implementation project(':module-main')
        implementation project(':module-home')
        implementation project(':module-frame')
        implementation project(':module-senior')
        implementation project(':module-other')
    }

}
